<script type="text/javascript">
	/*import XLSX from "xlsx-js-style";*/
	var modeAdvanced = false;

	$(document).ready(function() {
		$(".title-section").text($("nav #library span").text()).fadeIn(1000);
		$("input.custom-checkbox").click(clickCheckbox);
		$('button#select-all-nothing').click(selectAllNothing);
		$('button#calculate-tops').click(clickCalculateTops);
		$('button#toggle-results').click(clickToggleResults);
		$('button#remove').click(removeTests);
		var currentDateTime = getCurrentDateTime();
	});
	
	function clickTestName() {
		var tableClass = "basic-results-table";
		if (modeAdvanced) tableClass = "advanced-results-table";
		$(this).parent().find('table.' + tableClass).toggle();
	}
	
	function clickToggleResults() {
		$('table.basic-results-table').toggle();
		$('table.advanced-results-table').toggle();
		if (modeAdvanced) {
			$('button#toggle-results').html('Show advanced');
			modeAdvanced = false;
		}
		else {
			$('button#toggle-results').html('Show basic');
			modeAdvanced = true;
		}
	}
	
	function removeTests() {
		if (window.confirm("Remove selected tests?")) {
			return true;
		} else {
		    return false;
		}
	}

	function prepareExports() {
		// HTML
		var htmlWrapperStart = '<html>';
		htmlWrapperStart += '<head>';
		htmlWrapperStart += '<style>table, th, td {border: 1px solid black; border-collapse: collapse; text-align: center; padding: 5px; white-space: nowrap} table {margin: 0px 20px 50px 20px;} th {background-color: #e3e3e3} tr.top-header, th.top-id, td.top-id { background-color: #e3e3e3 !important; font-weight: bold;} td.top-header {font-weight: bold;}</style>'
		htmlWrapperStart += '</head>';
		htmlWrapperStart += '<body>';
		var htmlWrapperEnd = '</body>';
		htmlWrapperEnd += '</html>'
		
		$('div.test-result').each(function() {
			//EXCEL
			const resultsBasicTable = $(this).find('table.basic-results-table');
			const resultsAdvancedTable = $(this).find('table.advanced-results-table');
			const testId = $(this).find('div.test-id').text();
			const testName = $(this).find('span#test-name').text();
			//const wsBasic = XLSX.utils.table_to_sheet(resultsBasicTable[0]);
			//const wsAdvanced = XLSX.utils.table_to_sheet(resultsAdvancedTable[0]);
			/*
			var wsBasic = XLSX.utils.table_to_sheet(resultsBasicTable[0]);
			// Define a custom number format function
			const numberFormat = (cell) => {
			    if (typeof cell.v === 'string') {
			        cell.v = cell.v.replace(',', '.');
			    }
			    cell.z = '0.00'; // or use your desired format
			    return cell;
			};

			// Apply the custom format to all cells in the sheet
			Object.keys(wsBasic).forEach(key => {
			    if (wsBasic[key].t === 'n') {
			        numberFormat(wsBasic[key]);
			    }
			});
			
			
			
			var wsAdvanced = XLSX.utils.table_to_sheet(resultsAdvancedTable[0]);
			wsBasic = customizeWorksheet(wsBasic);
			wsAdvanced = customizeWorksheet(wsAdvanced);
			XLSX.utils.book_append_sheet(wbBasic, wsBasic, testId);
			XLSX.utils.book_append_sheet(wbAdvanced, wsAdvanced, testId);
			*/
			
			var htmlTestName = '<h3>Test ' + testId + ' - <i>' + testName + '</i></h3>';
			htmlBasic += htmlTestName;
			htmlBasic += '<table>' + resultsBasicTable.html() + '</table>';
			htmlAdvanced += htmlTestName;
			htmlAdvanced += '<table>' + resultsAdvancedTable.html() + '</table>';
		});
		
		htmlBasic = htmlWrapperStart + htmlBasic + htmlWrapperEnd;
		htmlAdvanced = htmlWrapperStart + htmlAdvanced + htmlWrapperEnd;	
	}
	
	/*
	function customizeWorksheet(worksheet){
		// define your headers 
		const headers = [
		    "FirstName",
		    "LastName",
		    "Email",
		]

		// set column widths
		const colWidths = [
		        { wch: 30 },
		        { wch: 30 },
		        { wch: 50 },
		]
		
		// consider if you have vertical headers
		const headerRowHeight = [
		    { hpt: 80 },
		]
		
		// Create a new worksheet: 
		const worksheet = XLSX.utils.json_to_sheet([])
		
		// Add the headers to the worksheet: 
		XLSX.utils.sheet_add_aoa(worksheet, [headers])
		
		// add data to sheet 
		XLSX.utils.sheet_add_json(worksheet, userData, {
    		skipHeader: true,
    		origin: -1
		})
		
		
		const colWidths = [
	        { wch: 35 },
		];
		
		worksheet['!cols'] = colWidths;
		
		// get size of sheet 
		const range = XLSX.utils.decode_range(worksheet["!ref"] ?? "")
		const rowCount = range.e.r
		const columnCount = range.e.c
		
		console.log('rowcount=' + rowCount);
		console.log('columncount=' + columnCount);
		
		// Add formatting by looping through data in sheet 
		for (let row = 0; row <= rowCount; row++) {
		    for (let col = 0; col <= columnCount; col++) {
		        const cellRef = XLSX.utils.encode_cell({ r: row, c: col })
		        console.log('worksheet[' + cellRef + ']=' + worksheet[cellRef]);
		        
		        if (worksheet[cellRef] != null) {
		        	// cell value:
		        	//var cell = worksheet[cellRef];
	                //console.log(cell.v);
		        	
		        	if (col === 0)
		        	worksheet[cellRef].s = {
			        	alignment: {
			        		wrapText: true
			        	}
		        	}
		        	
		        	if (row !== 0 && col !==0) {
			        	// Add this format to every cell
			        	worksheet[cellRef].s = {
			        		...worksheet[cellRef].s,
			        		alignment: {
			        			horizontal: "center"
			        		},
			        	}
		        	}
		        	
		        	if (col !== 0) {
		        		worksheet[cellRef].s = {
		        			...worksheet[cellRef].s,
				           	alignment: {
					            horizontal: "center",
					            vertical: "center",
				           	}
				        }
		        	} 
	
			        // Format headers bold
			        if (row === 0 || col === 0) {
			            worksheet[cellRef].s = {
			                //spreads in previous cell settings
			                ...worksheet[cellRef].s, 
			                font: { bold: true },
			                fill: {
			                	patternType: "solid",
			                	fgColor: {rgb: "d8d8d8" }
			                }
			            }
			        }
		        }

		    }
		}

		return worksheet;
	}
	*/
	
	function getCurrentDateTime() {
	    const now = new Date();
	    const year = now.getFullYear();
	    const month = (now.getMonth() + 1).toString().padStart(2, '0');
	    const day = now.getDate().toString().padStart(2, '0');
	    const hours = now.getHours().toString().padStart(2, '0');
	    const minutes = now.getMinutes().toString().padStart(2, '0');
	    const seconds = now.getSeconds().toString().padStart(2, '0');

	    return year + month + day + '-' + hours + minutes + seconds;
	}

	function exportResultsHTML() {
		var htmlCode = htmlBasic;
		if (modeAdvanced) htmlCode = htmlAdvanced;
		
		var blob = new Blob([ htmlCode ], {
			type : "text/plain;charset=utf-8"
		});
		var currentDateTime = getCurrentDateTime();
		var fileName = 'export_' + currentDateTime + '.html'
		saveAs(blob, fileName);
	}

	function exportResultsExcel() {
		// Save the workbook (you can trigger a download or handle it as needed)
		var currentDateTime = getCurrentDateTime();
		var fileName = 'export_' + currentDateTime + '.xlsx'
		if (modeAdvanced) {
			XLSX.writeFile(wbAdvanced, fileName);	
		} else {
			XLSX.writeFile(wbBasic, fileName);
		}
	}

	function clickCalculateTops() {
		$(".results").hide();
		var testIds = getActiveCheckboxes();
		if (testIds.length > 0) {
			var parameters = $.param({
				'id' : testIds
			}, true);
			executeAjax('POST', 'results.ctrl', parameters, 'HTML', true,
					successResults, error, always);
			//$('#test-list').removeClass('l6').addClass('l3');
			//$('#results-wrapper').removeClass('l6').addClass('l9');
			$('.preloader-wrapper').toggleClass('active');
			//$('.preloader-wrapper').show();
		} else {
			//$('#test-list').removeClass('l3').addClass('l6');
			//$('#results-wrapper').removeClass('l9').addClass('l6');
			$('div.default-message').show();
			$(".results").html('');
			$('div#secondary-actions').hide();
		}
	}
	
	function clickViewDistances() {
		var parId = $(this).parent().attr('id');
		console.log('par id = ' + parId);
		
		var parameters = $.param({
			'id' : parId
		}, true);
		executeAjax('POST', 'distances.ctrl', parameters, 'HTML', true, successDistances, error, always);
		$('.preloader-wrapper').toggleClass('active');
		
		//$('.preloader-wrapper').show();
		//$('#test-list').removeClass('l3').addClass('l6');
		//$('#results-wrapper').removeClass('l9').addClass('l6');
		//$(".distances").html('');
		//$('div#secondary-actions').hide();
	}
	
	function successDistances(data){
		console.log('par retrieved!');
		$("#distances").html(data);
		$("#distances").show();
	}

	function clickRemove() {
		var testIds = getActiveCheckboxes();
		if (testIds.length > 0) {
			var parameters = $.param({
				'id' : testIds
			}, true);
			executeAjax('POST', 'remove-tests', parameters, 'HTML', false,
					successRemoval, error, always);
		} else {
			alert('Please select the tests you want to get removed');
		}
	}

	function successRemoval(data) {
		console.log('tests removed!');
		//window.location.reload();
	}

	function getActiveCheckboxes() {
		var testIds = [];
		$("input.custom-checkbox:checked").each(function() {
			//console.log('val = ' + $(this).val());
			testIds.push($(this).val());
		});

		return testIds;
	}

	function clickCheckbox() {
		var testIds = getActiveCheckboxes();
		if (testIds.length > 0) {
			$('div#main-actions').show();
			$('div.default-message').hide();
		} else {
			//$('#test-list').removeClass('l3').addClass('l6');
			//$('#results-wrapper').removeClass('l9').addClass('l6');
			$('div.actions').hide();
			$('div.default-message').show();
			$(".results").html('');
			$(".results").hide();
			if (modeAdvanced) {
				$('button#toggle-results').html('Show advanced');
				modeAdvanced = false;
			}
		}
	};

	function successResults(data) {
		$(".results").html(data);
		$(".results").show();
		$('div#secondary-actions').show();
	}

	function error() {
		console.log('error!');
		/*$(".results").html();*/
	}

	function always() {
		$('.preloader-wrapper').toggleClass('active');
		//$('.preloader-wrapper').hide();
		/*console.log('always!');*/
	}
</script>